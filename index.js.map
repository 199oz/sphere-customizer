{"mappings":";;;;;;;AAIA,SAAS;IACP,uFAAuF;IACvF,MAAM,QAAQ,IAAI;IAClB,wDAAwD;IACxD,MAAM,SAAS,IAAI,+BAAwB,IAAI,OAAO,UAAU,GAAG,OAAO,WAAW,EAAE,KAAK;IAC5F,gCAAgC;IAChC,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG;IAC1B,mCAAmC;IACnC,MAAM,QAAQ;QACZ,OAAO,OAAO,UAAU;QACxB,QAAQ,OAAO,WAAW;IAC5B;IACA,MAAM,WAAW,IAAI;IACrB,SAAS,OAAO,CAAC,MAAM,KAAK,EAAE,MAAM,MAAM;IAC1C,oDAAoD;IACpD,SAAS,IAAI,CAAC,WAAW,CAAC,SAAS,UAAU;IAC7C,gDAAgD;IAEhD,IAAI,sBAAsB,IAAI,iCAA0B,GAAE;IAC1D,MAAM,sBAAsB,IAAI,kCAA2B;QAAC,OAAO;QAAS,aAAY;IAAI;IAC5F,MAAM,0BAA0B,IAAI,kCAA2B;QAAC,OAAO;QAAQ,WAAU;IAAI;IAE7F,IAAI,kBAAkB,IAAI,kBACxB,qBACA;IAGF,MAAM,WAAW,IAAI,kBACnB,qBACA;IAEF,SAAS,KAAK,CAAC,SAAS,CAAC;IAEzB,gBAAgB,GAAG,CAAC;IACpB,MAAM,GAAG,CAAC;IAEV,MAAM,QAAQ,IAAI,6BAAsB,UAAS,UAAS;IAC1D,MAAM,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK;IAC3B,MAAM,GAAG,CAAC;IAEV,MAAM,MAAM,IAAI;IAChB,MAAM,UAAU;QACd,QAAQ;QACR,QAAQ;QACR,UAAU,MAAM,KAAK,CAAC,MAAM;QAC5B,aAAa,MAAM,WAAW,CAAC,MAAM;IACvC;IACA,IAAI,GAAG,CAAC,SAAQ,UAAS,GAAE,IAAI,IAAI,CAAC,UAAU,QAAQ,CAAC;IACvD,IAAI,GAAG,CAAC,SAAQ,UAAS,GAAE,IAAI,IAAI,CAAC,WAAW,IAAI,CAAC,GAAG,QAAQ,CAAC;IAChE,IAAI,QAAQ,CAAC,SAAQ,YAAY,QAAQ,CAAC,CAAC;QACzC,MAAM,KAAK,CAAC,MAAM,CAAC;IACrB;IACA,IAAI,QAAQ,CAAC,SAAQ,eAAe,QAAQ,CAAC,CAAC;QAC5C,MAAM,WAAW,CAAC,MAAM,CAAC;IAC3B;IAEA,SAAS;QACP,MAAM,MAAM,CAAC;QAEb,gDAAgD;QAChD,sBAAsB,IAAI,iCAA0B,QAAQ,MAAM,EAAE,QAAQ,MAAM;QAElF,4CAA4C;QAC5C,kBAAkB,IAAI,kBAAW,qBAAqB;QACtD,SAAS,KAAK,CAAC,SAAS,CAAC;QAEzB,6CAA6C;QAC7C,gBAAgB,GAAG,CAAC;QACpB,MAAM,GAAG,CAAC;IACZ;IAEA,MAAM,WAAW,IAAI,CAAA,GAAA,4DAAY,EAAE,QAAQ,SAAS,UAAU;IAC9D,SAAS,aAAa,GAAE;IACxB,SAAS,aAAa,GAAG;IACzB,SAAS;QACP,SAAS,MAAM;QACf,sBAAsB;QACtB,SAAS,MAAM,CAAC,OAAO;IACzB;IAEA,OAAO,gBAAgB,CAAC,UAAU,UAAU;IAC5C,SAAS;QACP,OAAO,MAAM,GAAG,OAAO,UAAU,GAAG,OAAO,WAAW;QACtD,OAAO,sBAAsB;QAC7B,SAAS,OAAO,CAAC,OAAO,UAAU,EAAE,OAAO,WAAW;IACxD;IACA;AACF;AACA","sources":["script.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\nimport * as dat from 'dat.gui'\r\n\r\nfunction init() {\r\n  // create a scene, that will hold all our elements such as objects, cameras and lights.\r\n  const scene = new THREE.Scene();\r\n  // create a camera, which defines where we're looking at\r\n  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\r\n  // tell the camera where to look\r\n  camera.position.set(0, 0, 10);\r\n  // create a render and set the size\r\n  const sizes = {\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  }\r\n  const renderer = new THREE.WebGLRenderer();\r\n  renderer.setSize(sizes.width, sizes.height);\r\n  // add the output of the render function to the HTML\r\n  document.body.appendChild(renderer.domElement);\r\n  // function for re-rendering/animating the scene\r\n\r\n  let IcosahedronGeometry = new THREE.IcosahedronGeometry(3,2);\r\n  const icosahedronMaterial = new THREE.MeshStandardMaterial({color: 'yellow',flatShading:true})\r\n  const icosahedronGlowMaterial = new THREE.MeshStandardMaterial({color: 'black',wireframe:true});\r\n  \r\n  let icosahedronMesh = new THREE.Mesh(\r\n    IcosahedronGeometry,\r\n    icosahedronMaterial\r\n  )\r\n\r\n  const glowMesh = new THREE.Mesh(\r\n    IcosahedronGeometry,\r\n    icosahedronGlowMaterial\r\n  )\r\n  glowMesh.scale.addScalar(0.0003)\r\n\r\n  icosahedronMesh.add(glowMesh)\r\n  scene.add(icosahedronMesh)\r\n\r\n  const Light = new THREE.HemisphereLight(0xffffff,0x444444,2);\r\n  Light.position.set(0, 200, 0);\r\n  scene.add(Light)\r\n\r\n  const gui = new dat.GUI()\r\n  const options = {\r\n    radius: 3,\r\n    detail: 2,\r\n    skyColor: Light.color.getHex(),\r\n    groundColor: Light.groundColor.getHex(),\r\n  }\r\n  gui.add(options,'radius',1,10).name('Radius').onChange(updateGeometry)\r\n  gui.add(options,'detail',0,10).name('Details').step(1).onChange(updateGeometry)\r\n  gui.addColor(options,'skyColor').onChange((value) =>{\r\n    Light.color.setHex(value)\r\n  })\r\n  gui.addColor(options,'groundColor').onChange((value)=>{\r\n    Light.groundColor.setHex(value)\r\n  })\r\n\r\n  function updateGeometry() {\r\n    scene.remove(icosahedronMesh);\r\n\r\n    // Create a new geometry with updated parameters\r\n    icosahedronGeometry = new THREE.IcosahedronGeometry(options.radius, options.detail);\r\n\r\n    // Create a new mesh and add it to the scene\r\n    icosahedronMesh = new THREE.Mesh(icosahedronGeometry, icosahedronMaterial);\r\n    glowMesh.scale.addScalar(0.03);\r\n\r\n    // Re-add the glowMesh to the icosahedronMesh\r\n    icosahedronMesh.add(glowMesh);\r\n    scene.add(icosahedronMesh);\r\n  }\r\n\r\n  const controls = new OrbitControls(camera, renderer.domElement);\r\n  controls.enableDamping= true;\r\n  controls.dampingFactor = 0.03\r\n  function tick() {\r\n    controls.update()\r\n    requestAnimationFrame(tick);\r\n    renderer.render(scene, camera);\r\n  }\r\n\r\n  window.addEventListener('resize', onResize, false);\r\n  function onResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n  tick();\r\n}\r\ninit();"],"names":[],"version":3,"file":"index.js.map"}